insurance <- read.csv("insurance.csv", stringsAsFactors=TRUE)
head(insurance)
is.index <- sample(1:nrow(insurance), 0.7 * nrow(insurance))
is.train <- insurance[is.index, ]
is.test <- insurance[-is.index, ]
train.insurance.lm <- lm(charges~., data = is.train)
test.insurance.lm <- lm(charges~., data = is.test)
train.predictions <- predict(train.insurance.lm, newdata = is.train)
train.residuals <- is.train$charges - train.predictions
train.mse <- mean(train.residuals^2)
test.predictions <- predict(test.insurance.lm, newdata = is.test)
test.residuals <- is.test$charges - test.predictions
test.mse <- mean(test.residuals^2)
# Display MSE for training and test sets
cat("Training MSE:", train.mse, "\n")
cat("Test MSE:", test.mse, "\n")
insurance_tree <- tree(charges~., data=is.train)
insurance <- read.csv("insurance.csv", stringsAsFactors=TRUE)
head(insurance)
is.index <- sample(1:nrow(insurance), 0.7 * nrow(insurance))
is.train <- insurance[is.index, ]
is.test <- insurance[-is.index, ]
train.insurance.lm <- lm(charges~., data = is.train)
test.insurance.lm <- lm(charges~., data = is.test)
train.predictions <- predict(train.insurance.lm, newdata = is.train)
train.residuals <- is.train$charges - train.predictions
train.mse <- mean(train.residuals^2)
test.predictions <- predict(test.insurance.lm, newdata = is.test)
test.residuals <- is.test$charges - test.predictions
test.mse <- mean(test.residuals^2)
# Display MSE for training and test sets
cat("Training MSE:", train.mse, "\n")
cat("Test MSE:", test.mse, "\n")
library(tree)
insurance_tree <- tree(charges~., data=is.train)
plot(insurance_tree)
text(insurance_tree, pretty=0)
summary(insurance_tree)
cv.insurance_tree <- cv.tree(insurance_tree, K = 10)
plot(cv.insurance_tree, type="b")
training_tree_MSE <- min(cv.insurance_tree$dev)/nrow(insurance)
cat("The Training MSE is", training_tree_MSE)
test_predict <- predict(insurance_tree, newdata = is.test)
test_MSE <- mean((is.test$charges - test_predict)^2)
cat( "The Testing MSE is", test_MSE)
library("randomForest")
insurance_forest <- randomForest(charges~., data=is.train, mtry=4, importance=TRUE)
print(insurance_forest)
varImpPlot(insurance_forest)
insurance_forest_train_MSE <- insurance_forest$mse[500]
cat("The training MSE is", insurance_forest_train_MSE)
insurance_forest_predict <- predict(insurance_forest, newdata = is.test)
insurance_test_MSE <- mean((is.test$charges - insurance_forest_predict)^2)
cat("The testing MSE is", insurance_test_MSE)
library(glmnet)
x <- data.matrix(is.train[,c('age', 'sex', 'bmi', 'children', 'smoker', 'region')])
y <- is.train$charges
insurance_lasso <- cv.glmnet(x, y, alpha=1)
plot(insurance_lasso$glmnet.fit, label=TRUE, xvar="lambda")
plot(insurance_lasso)
lambda_value <- insurance_lasso$lambda.min
lambda_value
library(glmnet)
lasso_prediction <- predict(insurance_lasso, s="lambda.min", newx=data.matrix(is.test[,c('age', 'sex', 'bmi', 'children', 'smoker', 'region')]))
lasso_MSE <- mean((lasso_prediction - is.test$charges)^2)
lasso_MSE
library(gbm)
insurance_boosting <- gbm(charges ~ ., data = is.train, distribution = "gaussian", n.trees = 5000, cv.folds = 10, shrinkage = 0.1, interaction.depth = 2)
insurance_boosting
insurance_boosting_predictions <- predict(insurance_boosting, newdata = is.test)
boosting_MSE <- mean((is.test$charges - insurance_boosting_predictions)^2)
cat("The testing MSE is", boosting_MSE)
